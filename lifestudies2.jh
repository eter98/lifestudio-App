entity RegistrarInstitucion {
	institucionNombre String,
	institucionTipo Integer,
	institucionWebSite String,
	institucionPrefixNombre String,
	institucionNombre String,
	institucionApellido String,
	institucionMail String,
	institucionAreaCode String,
	institucionTelefono String,
	institucionMovil String,
	institucionSkype String,
	institucionDireccion String,
	institucionDireccion2 String,
	institucionCiudad String,
	institucionEstado String,
	institucionZipCode String,
	institucionPais String,
	institucionMailCorp String,
	institucionMovilCorp String,
	institucionSkypeCorp String,
	institucionLogo ImageBlob,
	institucionImage ImageBlob,
	institucionImage2 ImageBlob,
	institucionImage3 ImageBlob,
	institucionImage4 ImageBlob,
	institucionImage5 ImageBlob,
	institucionVideo AnyBlob,
	institucionDescripcion TextBlob
}


entity Cotizacion{
	cotizacionNombre String,
	cotizacionApellido String,
	cotizacionMail String,
	cotizacionAreaCode String,
	cotizacionTelefono String,
	cotizacionMovil String,
	cotizacionNacionalidad Integer,
	cotizacionPais Integer,
	cotizacionCiudad Integer,
	cotizacionPrograma Integer,
	cotizacionArea String,
	cotizacionFechaViaje LocalDate,
}

entity Pais {
	paisNombre String
}

entity Ciudad {
	ciudadNombre String
}

entity TipoPrograma {
	tipoNombre String
}

entity Programas{
	programaNombre String 
	
}

relationship OneToOne {
	Cotizacion{paisNombre} to Pais,
	Cotizacion{ciudadNombre} to Ciudad,
	Cotizacion{tipoNombre} to TipoPrograma
	Cotizacion{programa]Nombre} to Programas
}

entity PerfilUsuario {
	PerfilNombre String,
    PerfilApellido String,
    PerfilFechaNacimiento LocalDate,
	PerfilMail String,
    PerfilArea Integer,
    PerfilTelefono Integer,
    PerfilNivelAcademico NivelAcademico,
    PerfilAreaAcademica String,
    PerfilTerminoAcademico Integer,
    PerfilPuntajeICFES Integer,
    PerfilPromedioAcademico Integer,
    PerfilDominioIdioma Boolean,
    PerfilIdiomas String,
    PerfilExamenIdioma Boolean,
    PerfilExamenRealizado String,
    PerfilPuntajeIdioma Integer,
    PerfilBecaOtorgada Boolean,
    PerfilTipoBeca Integer,
    PerfilBecaInstitucion String,
    PerfilGrupoSocial Boolean,
    PerfilFundacion String,
    PerfilMonitor Boolean,
    PerfilMonitorMateria String,
    PerfilLogrosAcademicos String,
    PerfilExperienciaLaboral Boolean,
    PerfilAreaLaboral String,
    PerfilProgramarealizar Integer,
    PerfilProgramaArea String,
    PerfilFechaInicio LocalDate,
    PerfilProgramaEncontrado Boolean,
    PerfilNombrePrograma String,
    PerfilUniversidad String,
    PerfilPais Country,
    PerfilMerecedorBeca String
}

relationship OneToOne {
	PerfilUsuario{country} to Country
}
enum NivelAcademico {
    BACHILLER, UNIVERSITARIO, MAESTRIA, DOCTORADO
}



entity Region {
	regionName String
}

entity Country {
	countryName String
}

// an ignored comment
/** not an ignored comment */
entity Location {
	streetAddress String,
	postalCode String,
	city String,
	stateProvince String
}

entity Department {
	departmentName String required
}

/**
 * Task entity.
 * @author The JHipster team.
 */
entity Task {
	title String,
	description String
}

/**
 * The Employee entity.
 */
entity Employee {
	/**
	* The firstname attribute.
	*/
	firstName String,
	lastName String,
	email String,
	phoneNumber String,
	hireDate Instant,
	salary Long,
	commissionPct Long
}

entity Job {
	jobTitle String,
	minSalary Long,
	maxSalary Long
}

entity JobHistory {
	startDate Instant,
	endDate Instant,
	language Language
}

enum Language {
    FRENCH, ENGLISH, SPANISH
}

relationship OneToOne {
	Country{region} to Region
}

relationship OneToOne {
	Location{country} to Country
}

relationship OneToOne {
	Department{location} to Location
}

relationship ManyToMany {
	Job{task(title)} to Task{job}
}

// defining multiple OneToMany relationships with comments
relationship OneToMany {
	Employee{job} to Job,
	/**
	* A relationship
	*/
	Department{employee} to
	/**
	* Another side of the same relationship
	*/
	Employee
}

relationship ManyToOne {
	Employee{manager} to Employee
}

// defining multiple oneToOne relationships
relationship OneToOne {
	JobHistory{job} to Job,
	JobHistory{department} to Department,
	JobHistory{employee} to Employee
}

// Set pagination options
paginate JobHistory, Employee with infinite-scroll
paginate Job with pagination

// Use Data Transfert Objects (DTO)
// dto * with mapstruct

// Set service options to all except few
service all with serviceImpl except Employee, Job

// Set an angular suffix
// angularSuffix * with mySuffix
